package pubsub;

import java.util.Arrays;
import java.util.Collections;

import org.jetbrains.annotations.NotNull;

import com.google.gson.JsonElement;
import com.pubnub.api.PNConfiguration;
import com.pubnub.api.PubNub;
import com.pubnub.api.PubNubException;
import com.pubnub.api.callbacks.PNCallback;
import com.pubnub.api.callbacks.SubscribeCallback;
import com.pubnub.api.enums.PNStatusCategory;
import com.pubnub.api.models.consumer.PNStatus;
import com.pubnub.api.models.consumer.message_actions.PNMessageAction;
import com.pubnub.api.models.consumer.objects_api.channel.PNChannelMetadataResult;
import com.pubnub.api.models.consumer.objects_api.membership.PNMembershipResult;
import com.pubnub.api.models.consumer.objects_api.uuid.PNUUIDMetadataResult;
import com.pubnub.api.models.consumer.presence.PNSetStateResult;
import com.pubnub.api.models.consumer.pubsub.PNMessageResult;
import com.pubnub.api.models.consumer.pubsub.PNPresenceEventResult;
import com.pubnub.api.models.consumer.pubsub.PNSignalResult;
import com.pubnub.api.models.consumer.pubsub.files.PNFileEventResult;
import com.pubnub.api.models.consumer.pubsub.message_actions.PNMessageActionResult;

public class PubNubApp {
	private static String publish_key = "pub-c-74f31a3f-e3da-4cbe-81a6-02e2ba8744bd";
	private static String subscribe_key = "sub-c-1e6d4f2c-9012-11eb-968e-467c259650fa";

	public PubNubApp(PNConfiguration pnconfiguration) {
//		this.publish_key = "pub-c-74f31a3f-e3da-4cbe-81a6-02e2ba8744bd";
//		this.subscribe_key = "sub-c-1e6d4f2c-9012-11eb-968e-467c259650fa";
	}

	public PubNub createPubNubInstance() {
		PNConfiguration pnConfiguration = new PNConfiguration();
		pnConfiguration.setSubscribeKey(subscribe_key);
		pnConfiguration.setPublishKey(publish_key);
		pnConfiguration.setUuid("sdfdvsdvsdv"); // unique UUID

		return new PubNub(pnConfiguration);

	}

	public static void publishMessageToChannel(Object message, String channel) throws PubNubException {
		PNConfiguration pnConfiguration = new PNConfiguration();
		pnConfiguration.setSubscribeKey(subscribe_key);
		pnConfiguration.setPublishKey(publish_key);
		pnConfiguration.setUuid("sdfdvsdvsdv"); // unique UUID

		PubNub pubnub = new PubNub(pnConfiguration);

		String TEST_CHANNEL = "TEST_CHANNEL";
		pubnub.addListener(new PubNubSubCallback());
		pubnub.subscribe().channels(Collections.singletonList(channel));
		pubnub.publish().channel(TEST_CHANNEL).message(message).sync();
	}

	public static void main(String[] args) throws PubNubException, InterruptedException {
		System.out.println("Running pubnub main");
		PNConfiguration pnConfiguration = new PNConfiguration();
		pnConfiguration.setSubscribeKey(subscribe_key);
		pnConfiguration.setPublishKey(publish_key);
		pnConfiguration.setUuid("sdfdvsdvsdv"); // unique UUID

		PubNub pubnub = new PubNub(pnConfiguration);

		final String TEST_CHANNEL = "TEST_CHANNEL";

		pubnub.addListener(new SubscribeCallback() {
			// PubNub status
			@Override
			public void status(PubNub pubnub, PNStatus status) {
				System.out.println("status called");
				switch (status.getOperation()) {
				// combine unsubscribe and subscribe handling for ease of use
				case PNSubscribeOperation:
				case PNUnsubscribeOperation:
					// Note: subscribe statuses never have traditional errors,
					// just categories to represent different issues or successes
					// that occur as part of subscribe
					switch (status.getCategory()) {
					case PNConnectedCategory:
						// No error or issue whatsoever.
					case PNReconnectedCategory:
						// Subscribe temporarily failed but reconnected.
						// There is no longer any issue.
					case PNDisconnectedCategory:
						// No error in unsubscribing from everything.
					case PNUnexpectedDisconnectCategory:
						// Usually an issue with the internet connection.
						// This is an error: handle appropriately.
					case PNAccessDeniedCategory:
						// PAM does not allow this client to subscribe to this
						// channel and channel group configuration. This is
						// another explicit error.
					default:
						// You can directly specify more errors by creating
						// explicit cases for other error categories of
						// `PNStatusCategory` such as `PNTimeoutCategory` or
						// `PNMalformedFilterExpressionCategory` or
						// `PNDecryptionErrorCategory`.
					}

				case PNHeartbeatOperation:
					// Heartbeat operations can in fact have errors, so it's important to check
					// first for an error.
					// For more information on how to configure heartbeat notifications through the
					// status
					// PNObjectEventListener callback, refer to
					// /docs/sdks/java/android/api-reference/configuration#configuration_basic_usage
					if (status.isError()) {
						// There was an error with the heartbeat operation, handle here
					} else {
						// heartbeat operation was successful
					}
				default: {
					// Encountered unknown status type
				}
				}
			}

			// Messages
			@Override
			public void message(PubNub pubnub, PNMessageResult message) {
				System.out.println("messages called");
				String messagePublisher = message.getPublisher();
				System.out.println("Message publisher: " + messagePublisher);
				System.out.println("Message Payload: " + message.getMessage());
				System.out.println("Message Subscription: " + message.getSubscription());
				System.out.println("Message Channel: " + message.getChannel());
				System.out.println("Message timetoken: " + message.getTimetoken());
			}

			// Presence
			@Override
			public void presence(@NotNull PubNub pubnub, @NotNull PNPresenceEventResult presence) {
				System.out.println("Presence Event: " + presence.getEvent());
				// Can be join, leave, state-change or timeout

				System.out.println("Presence Channel: " + presence.getChannel());
				// The channel to which the message was published

				System.out.println("Presence Occupancy: " + presence.getOccupancy());
				// Number of users subscribed to the channel

				System.out.println("Presence State: " + presence.getState());
				// User state

				System.out.println("Presence UUID: " + presence.getUuid());
				// UUID to which this event is related

				presence.getJoin();
				// List of users that have joined the channel (if event is 'interval')

				presence.getLeave();
				// List of users that have left the channel (if event is 'interval')

				presence.getTimeout();
				// List of users that have timed-out off the channel (if event is 'interval')

				presence.getHereNowRefresh();
				// Indicates to the client that it should call 'hereNow()' to get the
				// complete list of users present in the channel.
			}

			// Signals
			@Override
			public void signal(PubNub pubnub, PNSignalResult pnSignalResult) {
				System.out.println("Signal publisher: " + pnSignalResult.getPublisher());
				System.out.println("Signal payload: " + pnSignalResult.getMessage());
				System.out.println("Signal subscription: " + pnSignalResult.getSubscription());
				System.out.println("Signal channel: " + pnSignalResult.getChannel());
				System.out.println("Signal timetoken: " + pnSignalResult.getTimetoken());
			}

			// Message actions
			@Override
			public void messageAction(PubNub pubnub, PNMessageActionResult pnActionResult) {

				PNMessageAction pnMessageAction = pnActionResult.getMessageAction();
				System.out.println("Message action type: " + pnMessageAction.getType());
				System.out.println("Message action value: " + pnMessageAction.getValue());
				System.out.println("Message action uuid: " + pnMessageAction.getUuid());
				System.out.println("Message action actionTimetoken: " + pnMessageAction.getActionTimetoken());
				System.out.println("Message action messageTimetoken: " + pnMessageAction.getMessageTimetoken());
				System.out.println("Message action subscription: " + pnActionResult.getSubscription());
				System.out.println("Message action channel: " + pnActionResult.getChannel());
				System.out.println("Message action timetoken: " + pnActionResult.getTimetoken());
			}

			// files
			@Override
			public void file(PubNub pubnub, PNFileEventResult pnFileEventResult) {
				System.out.println("File channel: " + pnFileEventResult.getChannel());
				System.out.println("File publisher: " + pnFileEventResult.getPublisher());
				System.out.println("File message: " + pnFileEventResult.getMessage());
				System.out.println("File timetoken: " + pnFileEventResult.getTimetoken());
				System.out.println("File file.id: " + pnFileEventResult.getFile().getId());
				System.out.println("File file.name: " + pnFileEventResult.getFile().getName());
				System.out.println("File file.url: " + pnFileEventResult.getFile().getUrl());
			}

			@Override
			public void uuid(@NotNull PubNub pubnub, @NotNull PNUUIDMetadataResult pnUUIDMetadataResult) {
				// TODO Auto-generated method stub

			}

			@Override
			public void channel(@NotNull PubNub pubnub, @NotNull PNChannelMetadataResult pnChannelMetadataResult) {
				// TODO Auto-generated method stub

			}

			@Override
			public void membership(@NotNull PubNub pubnub, @NotNull PNMembershipResult pnMembershipResult) {
				// TODO Auto-generated method stub

			}
		});
		pubnub.subscribe().channels(Collections.singletonList(TEST_CHANNEL)).execute();
		Thread.sleep(1000);

		pubnub.publish().channel(TEST_CHANNEL).message(new String("PUBSUB FOOBAR")).sync();
		System.out.println("End run");
		//
//		pubnub.addListener(new SubscribeCallback() {
//		    @Override
//		    public void status(PubNub pubnub, PNStatus status) {
//		        if (status.getCategory() == PNStatusCategory.PNConnectedCategory){
//		            complexData data = new complexData();
//		            data.fieldA = "Awesome";
//		            data.fieldB = 10;
//		            pubnub.setPresenceState()
//		                .channels(Arrays.asList("awesomeChannel"))
//		                .channelGroups(Arrays.asList("awesomeChannelGroup"))
//		                .state(data).async(new PNCallback<PNSetStateResult>() {
//		                    @Override
//		                    public void onResponse(PNSetStateResult result, PNStatus status) {
//		                        // handle set state response
//		                    }
//		                });
//		        }
//		    }
//
//		    @Override
//		    public void message(PubNub pubnub, PNMessageResult message) {
//
//		    }
//
//		    @Override
//		    public void presence(PubNub pubnub, PNPresenceEventResult presence) {
//
//		    }
//		});
	}

}
